// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum UserRole {
  FARMER
  SELLER
  ADMIN
}

enum FarmCapacity {
  SMALL // < 1 hectare
  MEDIUM // 1-5 hectares
  LARGE // > 5 hectares
}

enum ProductStatus {
  ACTIVE
  SOLD_OUT
  INACTIVE
  DRAFT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  READY_FOR_DELIVERY
  DELIVERED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  ESCROWED
  RELEASED
}

enum ReviewEntityType {
  PRODUCT
  FARMER
}

enum NotificationType {
  ORDER_CREATED
  ORDER_UPDATED
  PAYMENT_RECEIVED
  MESSAGE_RECEIVED
  REVIEW_RECEIVED
  SYSTEM_ANNOUNCEMENT
  
  ORDER_PLACED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  PRODUCT_APPROVED
  PRODUCT_REJECTED
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(FARMER)
  phoneNumber  String?  @unique
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  profile        Profile?
  sentMessages   ChatMessage[]  @relation("MessageSender")
  chatSessions1  ChatSession[]  @relation("ChatParticipant1")
  chatSessions2  ChatSession[]  @relation("ChatParticipant2")
  reviews        Review[]       @relation("ReviewAuthor")
  notifications  Notification[]
  ordersAsSeller Order[]        @relation("OrderSeller")
  ordersAsFarmer Order[]        @relation("OrderFarmer")
  accounts       Account[]
  sessions       Session[]
  cart           Cart?
  savedProducts  SavedProduct[]

  @@index([email])
  @@index([phoneNumber])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  name              String
  location          String // JSON string for structured Rwandan location
  description       String?
  profilePictureUrl String?
  contactEmail      String?
  contactPhone      String?
  socialLinks       Json? // JSON object for social media links
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  farmerProfile FarmerProfile?
  sellerProfile SellerProfile?

  @@index([userId])
  @@map("profiles")
}

model FarmerProfile {
  id                  String       @id @default(cuid())
  profileId           String       @unique
  farmName            String
  farmLocationDetails String
  farmCapacity        FarmCapacity
  certifications      String[]
  gpsCoordinates      String?
  bio                 String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  profile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  products Product[]

  @@index([profileId])
  @@map("farmer_profiles")
}

model SellerProfile {
  id                         String   @id @default(cuid())
  profileId                  String   @unique
  businessName               String
  deliveryOptions            String[] // Array of delivery methods
  businessRegistrationNumber String?
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relations
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("seller_profiles")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id                   String        @id @default(cuid())
  name                 String
  description          String
  categoryId           String
  quantityAvailable    Decimal       @db.Decimal(10, 2)
  unitPrice            Decimal       @db.Decimal(10, 2)
  availabilityDate     DateTime
  imageUrls            String[]
  minimumOrderQuantity Int           @default(1)
  status               ProductStatus @default(DRAFT)
  farmerId             String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  category     Category       @relation(fields: [categoryId], references: [id])
  farmer       FarmerProfile  @relation(fields: [farmerId], references: [id])
  orderItems   OrderItem[]
  reviews      Review[]
  cartItems    CartItem[]
  savedByUsers SavedProduct[]

  @@index([categoryId])
  @@index([farmerId])
  @@index([status])
  @@map("products")
}

model Order {
  id              String        @id @default(cuid())
  sellerId        String
  farmerId        String
  status          OrderStatus   @default(PENDING)
  orderDate       DateTime      @default(now())
  totalAmount     Decimal       @db.Decimal(10, 2)
  deliveryAddress String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentRefId    String?
  deliveryFee     Decimal       @default(0) @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  seller     User        @relation("OrderSeller", fields: [sellerId], references: [id])
  farmer     User        @relation("OrderFarmer", fields: [farmerId], references: [id])
  orderItems OrderItem[]

  @@index([sellerId])
  @@index([farmerId])
  @@index([status])
  @@index([paymentStatus])
  @@map("orders")
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  quantity     Int
  priceAtOrder Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model ChatSession {
  id             String   @id @default(cuid())
  participant1Id String
  participant2Id String
  lastMessageAt  DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  participant1 User          @relation("ChatParticipant1", fields: [participant1Id], references: [id])
  participant2 User          @relation("ChatParticipant2", fields: [participant2Id], references: [id])
  messages     ChatMessage[]

  @@unique([participant1Id, participant2Id])
  @@index([participant1Id])
  @@index([participant2Id])
  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  chatSessionId String
  senderId      String
  content       String
  timestamp     DateTime @default(now())
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])

  @@index([chatSessionId])
  @@index([senderId])
  @@index([timestamp])
  @@map("chat_messages")
}

model Review {
  id                 String           @id @default(cuid())
  reviewedEntityId   String
  reviewedEntityType ReviewEntityType
  reviewerId         String
  rating             Int              @db.SmallInt // 1-5 rating
  comment            String?
  timestamp          DateTime         @default(now())
  isApproved         Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relations
  reviewer User     @relation("ReviewAuthor", fields: [reviewerId], references: [id])
  product  Product? @relation(fields: [reviewedEntityId], references: [id])

  @@index([reviewedEntityId])
  @@index([reviewerId])
  @@index([reviewedEntityType])
  @@map("reviews")
}

model Notification {
  id              String           @id @default(cuid())
  userId          String
  type            NotificationType
  content         String
  isRead          Boolean          @default(false)
  timestamp       DateTime         @default(now())
  link            String?
  relatedEntityId String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([timestamp])
  @@map("notifications")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@map("cart_items")
}

model SavedProduct {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("saved_products")
}
